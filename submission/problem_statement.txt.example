The project is to build a simple Unix shell named wish.

Core Functionality:

    Interactive Mode: Displays a prompt wish> and executes user commands.
    Batch Mode: Takes a filename as an argument, executes commands from the file sequentially, and does not print a prompt.
    Command Execution:
        For non-builtin commands, wish forks a child process.
        The child process uses execv to execute the specified command. The parent process waits for the child to complete using wait() or waitpid().
        system() must not be used.
        Input lines are read using getline(). EOF (in either mode) should result in a graceful exit(0).
        Input parsing can be done using strsep().

Path Management:

    The shell maintains a search path for executables.
    The initial path is /bin.
    When a command is entered (e.g., ls), wish searches for the executable in the directories specified in its path (e.g., try /bin/ls).
    access() with X_OK should be used to check if a file at a constructed path (e.g., /bin/ls) exists and is executable.
    The project does not require handling absolute (e.g., /bin/ls) or relative (e.g., ./myprog) paths specified by the user.

Built-in Commands:
These are executed directly by the shell, not as separate processes.

    exit:
        Takes no arguments.
        Terminates wish by calling exit(0).
        Any arguments to exit is an error.
    cd:
        Takes exactly one argument (the directory to change to).
        Uses chdir() to change the current directory.
        0 or >1 arguments is an error. chdir() failure is an error.
    path:
        Takes zero or more arguments, each being a directory to add to the search path.
        Overwrites the existing search path.
        path with no arguments clears the search path (no non-builtin commands can be run).

Redirection:

    Format: command [arguments] > outputfile.
    Redirects both standard output (stdout) and standard error (stderr) of command to outputfile.
    outputfile is created if it doesn't exist or truncated and overwritten if it does.
    Only one redirection operator and one output file are permitted per command line. Violations are errors.
    Redirection does not apply to built-in commands.

Parallel Commands (Optional Feature):

    Commands can be separated by & (e.g., cmd1 args & cmd2 & cmd3 args).
    All commands specified in this manner should be launched in parallel.
    The shell must wait for all parallel child processes to complete before prompting for new input (or processing the next line in batch mode).

Error Handling:

    A single, specific error message must be used for all errors: char error_message[30] = "An error has occurred\n"; write(STDERR_FILENO, error_message, strlen(error_message));.
    Fatal Errors:
        If wish is invoked with more than one argument (i.e., multiple batch files).
        If the batch file specified cannot be opened.
        In these cases, wish should print the error message and exit(1).
    Non-Fatal Errors: For most other errors (e.g., command not found, incorrect arguments to built-ins, redirection errors), print the error message to stderr and continue processing (i.e., show the prompt again or read the next batch line).
    The shell is responsible for syntax errors. Errors generated by the executed programs themselves (e.g., ls with an invalid option) are not the shell's responsibility to catch beyond successfully launching the program.

Miscellaneous:

    Handle varying amounts of whitespace (spaces, tabs) around commands, arguments, and operators.
    Operators (> and &) do not require whitespace around them.
    All system call return values should be checked for errors.